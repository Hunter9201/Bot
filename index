<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Study Planner with Telegram Storage</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body { 
            background-color: #f8fafc; 
            font-family: 'Inter', sans-serif;
        }
        .progress-bar { 
            height: 10px; 
            border-radius: 6px; 
            background: #e5e7eb; 
            overflow: hidden; 
        }
        .progress-inner { 
            height: 100%; 
            background: linear-gradient(to right, #4f46e5, #9333ea); 
            transition: width 0.5s ease; 
        }
        .subject-card {
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .subject-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        .completed {
            text-decoration: line-through;
            opacity: 0.7;
        }
        .hidden {
            display: none !important;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col">

<!-- Configuration Modal -->
<div id="configModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
        <h2 class="text-xl font-bold mb-4">Telegram Setup Required</h2>
        <p class="text-gray-600 mb-4">To save your data, you need to set up a Telegram bot and channel.</p>
        
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium mb-2">Telegram Bot Token</label>
                <input type="text" id="botToken" placeholder="Get from @BotFather" 
                       class="w-full border rounded-lg px-3 py-2">
            </div>
            <div>
                <label class="block text-sm font-medium mb-2">Channel Username</label>
                <input type="text" id="channelId" placeholder="@your_channel_name" 
                       class="w-full border rounded-lg px-3 py-2">
            </div>
            <div>
                <label class="block text-sm font-medium mb-2">User ID</label>
                <input type="text" id="userId" placeholder="your_unique_id" 
                       class="w-full border rounded-lg px-3 py-2">
            </div>
        </div>

        <div class="mt-6 bg-yellow-50 p-4 rounded-lg">
            <h3 class="font-semibold mb-2">Setup Instructions:</h3>
            <ol class="text-sm text-gray-700 list-decimal list-inside space-y-1">
                <li>Create a bot via @BotFather on Telegram</li>
                <li>Create a private channel</li>
                <li>Add your bot as admin to the channel</li>
                <li>Fill in the details above</li>
            </ol>
        </div>

        <button id="saveConfig" class="w-full bg-indigo-600 text-white py-2 rounded-lg mt-4 hover:bg-indigo-700">
            Save Configuration
        </button>
    </div>
</div>

<!-- Main App -->
<div id="app" class="hidden">
    <header class="bg-gradient-to-r from-indigo-700 to-purple-700 text-white py-4 shadow-md">
        <div class="max-w-6xl mx-auto px-6 flex justify-between items-center">
            <div>
                <h1 class="text-2xl font-extrabold"><i class="fas fa-book mr-2"></i>STUDY PLANNER</h1>
                <p class="text-xs opacity-90">Telegram-Backed Storage</p>
            </div>
            <div class="flex items-center space-x-4">
                <span id="syncStatus" class="text-sm bg-white/20 px-2 py-1 rounded"></span>
                <button id="configBtn" class="bg-white/20 hover:bg-white/30 px-3 py-1 rounded text-sm">
                    <i class="fas fa-cog mr-1"></i>Config
                </button>
            </div>
        </div>
    </header>

    <main class="flex-1 max-w-4xl mx-auto p-6">
        <!-- Dashboard -->
        <div id="dashboard" class="space-y-6">
            <!-- Progress -->
            <section class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-xl font-semibold text-indigo-700 mb-4">Study Progress</h2>
                <div class="progress-bar mb-2">
                    <div id="progressBar" class="progress-inner" style="width:0%;"></div>
                </div>
                <p id="progressText" class="text-sm text-gray-600 text-right">0% Completed</p>
            </section>

            <!-- Quick Actions -->
            <section class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-xl font-semibold text-indigo-700 mb-4">Quick Actions</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <button onclick="showSection('subjects')" class="p-4 bg-indigo-50 rounded-lg hover:bg-indigo-100 transition-colors flex items-center justify-center flex-col">
                        <i class="fas fa-book-open text-2xl text-indigo-600 mb-2"></i>
                        <span class="font-semibold text-indigo-700">Manage Subjects</span>
                    </button>
                    <button onclick="showSection('study-plan')" class="p-4 bg-green-50 rounded-lg hover:bg-green-100 transition-colors flex items-center justify-center flex-col">
                        <i class="fas fa-calendar-plus text-2xl text-green-600 mb-2"></i>
                        <span class="font-semibold text-green-700">Study Plan</span>
                    </button>
                    <button onclick="saveToTelegram()" class="p-4 bg-purple-50 rounded-lg hover:bg-purple-100 transition-colors flex items-center justify-center flex-col">
                        <i class="fas fa-cloud-upload-alt text-2xl text-purple-600 mb-2"></i>
                        <span class="font-semibold text-purple-700">Save to Telegram</span>
                    </button>
                </div>
            </section>

            <!-- Subjects Preview -->
            <section class="bg-white rounded-xl shadow-md p-6">
                <h2 class="text-xl font-semibold text-indigo-700 mb-4">Your Subjects</h2>
                <div id="subjectsPreview" class="grid grid-cols-2 md:grid-cols-4 gap-3">
                    <!-- Subjects will appear here -->
                </div>
            </section>
        </div>

        <!-- Subjects Management -->
        <div id="subjects" class="hidden space-y-6">
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-semibold text-indigo-700">Manage Subjects</h2>
                    <button onclick="showSection('dashboard')" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">
                        <i class="fas fa-arrow-left mr-2"></i>Back
                    </button>
                </div>

                <!-- Add Subject Form -->
                <div class="mb-6 p-4 bg-gray-50 rounded-lg">
                    <h3 class="font-semibold mb-3">Add New Subject</h3>
                    <div class="flex gap-3">
                        <input type="text" id="newSubjectName" placeholder="Subject name" 
                               class="flex-1 border rounded-lg px-3 py-2">
                        <input type="number" id="newSubjectHours" placeholder="Hours" 
                               class="w-24 border rounded-lg px-3 py-2">
                        <button onclick="addSubject()" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700">
                            Add
                        </button>
                    </div>
                </div>

                <!-- Subjects List -->
                <div id="subjectsList" class="space-y-3">
                    <!-- Subjects will be listed here -->
                </div>
            </div>
        </div>

        <!-- Study Plan -->
        <div id="study-plan" class="hidden space-y-6">
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-semibold text-indigo-700">Study Plan Generator</h2>
                    <button onclick="showSection('dashboard')" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">
                        <i class="fas fa-arrow-left mr-2"></i>Back
                    </button>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div>
                        <label class="block text-sm font-medium mb-2">Study Date</label>
                        <input type="date" id="studyDate" class="w-full border rounded-lg px-3 py-2">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Duration (hours)</label>
                        <input type="number" id="studyDuration" value="2" min="0.5" max="8" step="0.5" 
                               class="w-full border rounded-lg px-3 py-2">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Subjects</label>
                        <select id="studySubjects" multiple class="w-full border rounded-lg px-3 py-2 h-32">
                            <!-- Subjects will be populated here -->
                        </select>
                    </div>
                </div>

                <button onclick="generatePlan()" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                    <i class="fas fa-plus mr-2"></i>Generate Plan
                </button>

                <!-- Generated Plan -->
                <div id="generatedPlan" class="mt-6 p-4 bg-gray-50 rounded-lg hidden">
                    <h3 class="font-semibold mb-3">Your Study Plan</h3>
                    <div id="planContent">
                        <!-- Plan will appear here -->
                    </div>
                </div>
            </div>
        </div>
    </main>
</div>

<script>
// Configuration
let CONFIG = {
    botToken: localStorage.getItem('botToken') || '',
    channelId: localStorage.getItem('channelId') || '',
    userId: localStorage.getItem('userId') || 'user_' + Math.random().toString(36).substr(2, 9)
};

// App Data
let appData = {
    subjects: [],
    studyPlans: [],
    progress: 0,
    lastSync: null
};

// DOM Elements
const configModal = document.getElementById('configModal');
const appElement = document.getElementById('app');
const syncStatus = document.getElementById('syncStatus');

// Initialize App
function initApp() {
    if (!CONFIG.botToken || !CONFIG.channelId) {
        configModal.classList.remove('hidden');
        document.getElementById('userId').value = CONFIG.userId;
    } else {
        startApp();
        loadFromTelegram();
    }
}

function startApp() {
    configModal.classList.add('hidden');
    appElement.classList.remove('hidden');
    updateSyncStatus('Ready');
}

// Configuration
document.getElementById('saveConfig').addEventListener('click', function() {
    CONFIG.botToken = document.getElementById('botToken').value.trim();
    CONFIG.channelId = document.getElementById('channelId').value.trim();
    CONFIG.userId = document.getElementById('userId').value.trim() || CONFIG.userId;
    
    if (!CONFIG.botToken || !CONFIG.channelId) {
        alert('Please fill in all required fields');
        return;
    }
    
    // Save to localStorage
    localStorage.setItem('botToken', CONFIG.botToken);
    localStorage.setItem('channelId', CONFIG.channelId);
    localStorage.setItem('userId', CONFIG.userId);
    
    startApp();
    loadFromTelegram();
});

document.getElementById('configBtn').addEventListener('click', function() {
    configModal.classList.remove('hidden');
    document.getElementById('botToken').value = CONFIG.botToken;
    document.getElementById('channelId').value = CONFIG.channelId;
    document.getElementById('userId').value = CONFIG.userId;
});

// Telegram API Functions
async function saveToTelegram() {
    updateSyncStatus('Saving...');
    
    try {
        const timestamp = new Date().toISOString();
        const messageText = `STUDY_PLANNER_DATA:${CONFIG.userId}:${timestamp}\n${JSON.stringify(appData)}`;
        
        const response = await fetch(`https://api.telegram.org/bot${CONFIG.botToken}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: CONFIG.channelId,
                text: messageText,
                parse_mode: 'HTML'
            })
        });
        
        const result = await response.json();
        
        if (result.ok) {
            updateSyncStatus('Saved!');
            appData.lastSync = new Date();
            setTimeout(() => updateSyncStatus('Ready'), 2000);
        } else {
            throw new Error(result.description);
        }
    } catch (error) {
        console.error('Save error:', error);
        updateSyncStatus('Save failed');
        setTimeout(() => updateSyncStatus('Ready'), 3000);
    }
}

async function loadFromTelegram() {
    updateSyncStatus('Loading...');
    
    try {
        const response = await fetch(`https://api.telegram.org/bot${CONFIG.botToken}/getChatHistory?chat_id=${CONFIG.channelId}&limit=100`);
        const result = await response.json();
        
        if (result.ok) {
            const messages = result.result;
            const userMessages = messages.filter(msg => 
                msg.text && msg.text.startsWith(`STUDY_PLANNER_DATA:${CONFIG.userId}:`)
            );
            
            if (userMessages.length > 0) {
                const latestMessage = userMessages[0];
                const dataText = latestMessage.text.split('\n')[1];
                appData = JSON.parse(dataText);
                updateSyncStatus('Loaded!');
                updateUI();
            } else {
                // Initialize with sample data
                appData.subjects = [
                    { id: 1, name: 'Mathematics', hours: 40, completed: false },
                    { id: 2, name: 'Physics', hours: 35, completed: false },
                    { id: 3, name: 'Chemistry', hours: 30, completed: false }
                ];
                updateSyncStatus('New user');
            }
            
            setTimeout(() => updateSyncStatus('Ready'), 2000);
        } else {
            throw new Error(result.description);
        }
    } catch (error) {
        console.error('Load error:', error);
        updateSyncStatus('Load failed');
        setTimeout(() => updateSyncStatus('Ready'), 3000);
    }
}

function updateSyncStatus(status) {
    syncStatus.textContent = status;
}

// Subject Management
function addSubject() {
    const nameInput = document.getElementById('newSubjectName');
    const hoursInput = document.getElementById('newSubjectHours');
    
    const name = nameInput.value.trim();
    const hours = parseInt(hoursInput.value);
    
    if (!name || isNaN(hours)) {
        alert('Please enter valid subject name and hours');
        return;
    }
    
    const newSubject = {
        id: Date.now(),
        name: name,
        hours: hours,
        completed: false
    };
    
    appData.subjects.push(newSubject);
    updateUI();
    saveToTelegram();
    
    // Clear inputs
    nameInput.value = '';
    hoursInput.value = '';
}

function toggleSubjectCompletion(subjectId) {
    const subject = appData.subjects.find(s => s.id === subjectId);
    if (subject) {
        subject.completed = !subject.completed;
        updateUI();
        saveToTelegram();
    }
}

function deleteSubject(subjectId) {
    appData.subjects = appData.subjects.filter(s => s.id !== subjectId);
    updateUI();
    saveToTelegram();
}

// Study Plan
function generatePlan() {
    const date = document.getElementById('studyDate').value;
    const duration = parseFloat(document.getElementById('studyDuration').value);
    const subjectSelect = document.getElementById('studySubjects');
    
    if (!date || !duration) {
        alert('Please select date and duration');
        return;
    }
    
    const selectedSubjects = Array.from(subjectSelect.selectedOptions).map(opt => opt.value);
    const subjectsToStudy = appData.subjects.filter(s => selectedSubjects.includes(s.id.toString()));
    
    if (subjectsToStudy.length === 0) {
        alert('Please select at least one subject');
        return;
    }
    
    const plan = {
        id: Date.now(),
        date: date,
        duration: duration,
        subjects: subjectsToStudy.map(s => ({ id: s.id, name: s.name }))
    };
    
    appData.studyPlans.push(plan);
    
    // Display plan
    const planContent = document.getElementById('planContent');
    planContent.innerHTML = `
        <div class="bg-white p-4 rounded-lg border">
            <h4 class="font-semibold mb-2">${new Date(date).toLocaleDateString()} - ${duration} hours</h4>
            <ul class="list-disc list-inside space-y-1">
                ${subjectsToStudy.map(s => `<li>${s.name}</li>`).join('')}
            </ul>
        </div>
    `;
    
    document.getElementById('generatedPlan').classList.remove('hidden');
    saveToTelegram();
}

// UI Updates
function updateUI() {
    updateProgress();
    updateSubjectsList();
    updateSubjectsPreview();
    updateStudySubjectsSelect();
}

function updateProgress() {
    const totalSubjects = appData.subjects.length;
    const completedSubjects = appData.subjects.filter(s => s.completed).length;
    const progress = totalSubjects > 0 ? (completedSubjects / totalSubjects) * 100 : 0;
    
    document.getElementById('progressBar').style.width = `${progress}%`;
    document.getElementById('progressText').textContent = `${Math.round(progress)}% Completed (${completedSubjects}/${totalSubjects} subjects)`;
}

function updateSubjectsList() {
    const container = document.getElementById('subjectsList');
    container.innerHTML = appData.subjects.map(subject => `
        <div class="flex items-center justify-between p-3 border rounded-lg subject-card ${subject.completed ? 'completed bg-green-50' : 'bg-white'}">
            <div class="flex items-center space-x-3">
                <input type="checkbox" ${subject.completed ? 'checked' : ''} 
                       onchange="toggleSubjectCompletion(${subject.id})"
                       class="w-4 h-4 text-indigo-600">
                <span class="font-medium">${subject.name}</span>
                <span class="text-sm text-gray-500">${subject.hours} hours</span>
            </div>
            <button onclick="deleteSubject(${subject.id})" class="text-red-600 hover:text-red-800">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    `).join('');
}

function updateSubjectsPreview() {
    const container = document.getElementById('subjectsPreview');
    const previewSubjects = appData.subjects.slice(0, 4);
    
    container.innerHTML = previewSubjects.map(subject => `
        <div class="text-center p-3 bg-white border rounded-lg ${subject.completed ? 'completed' : ''}">
            <div class="font-semibold">${subject.name}</div>
            <div class="text-sm text-gray-500">${subject.hours}h</div>
            <div class="text-xs ${subject.completed ? 'text-green-600' : 'text-yellow-600'}">
                ${subject.completed ? 'Completed' : 'In Progress'}
            </div>
        </div>
    `).join('');
    
    if (appData.subjects.length > 4) {
        container.innerHTML += `
            <div class="text-center p-3 bg-gray-50 border rounded-lg">
                <div class="font-semibold">+${appData.subjects.length - 4} more</div>
                <div class="text-sm text-gray-500">subjects</div>
            </div>
        `;
    }
}

function updateStudySubjectsSelect() {
    const select = document.getElementById('studySubjects');
    select.innerHTML = appData.subjects.map(subject => `
        <option value="${subject.id}">${subject.name} (${subject.hours}h)</option>
    `).join('');
}

// Navigation
function showSection(sectionName) {
    // Hide all sections
    document.getElementById('dashboard').classList.add('hidden');
    document.getElementById('subjects').classList.add('hidden');
    document.getElementById('study-plan').classList.add('hidden');
    
    // Show selected section
    document.getElementById(sectionName).classList.remove('hidden');
    
    // Update UI for the section
    if (sectionName === 'study-plan') {
        document.getElementById('studyDate').valueAsDate = new Date();
        updateStudySubjectsSelect();
    }
}

// Auto-save every 2 minutes
setInterval(saveToTelegram, 120000);

// Initialize the app when page loads
document.addEventListener('DOMContentLoaded', initApp);
</script>
</body>
</html>
